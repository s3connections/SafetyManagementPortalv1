using AutoMapper;
using SafetyManagementPortal.Backend.Models;
using SafetyManagementPortal.Backend.DTOs.Observation;
using SafetyManagementPortal.Backend.DTOs.Audit;
using SafetyManagementPortal.Backend.DTOs.Permit;

namespace SafetyManagementPortal.Backend.Profiles
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            // âœ… FIXED: Observation mappings with proper Priority entity handling
            CreateMap<Observation, ObservationDto>()
                .ForMember(dest => dest.ReportedByUserName, opt => opt.MapFrom(src => src.ReportedByUser != null ? $"{src.ReportedByUser.FirstName} {src.ReportedByUser.LastName}" : ""))
                .ForMember(dest => dest.ReportedByUserEmail, opt => opt.MapFrom(src => src.ReportedByUser != null ? src.ReportedByUser.Email : ""))
                .ForMember(dest => dest.AssignedToUserName, opt => opt.MapFrom(src => src.AssignedToUser != null ? $"{src.AssignedToUser.FirstName} {src.AssignedToUser.LastName}" : null))
                .ForMember(dest => dest.AssignedToUserEmail, opt => opt.MapFrom(src => src.AssignedToUser != null ? src.AssignedToUser.Email : null))
                .ForMember(dest => dest.PlantName, opt => opt.MapFrom(src => src.Plant != null ? src.Plant.Name : null))
                .ForMember(dest => dest.DepartmentName, opt => opt.MapFrom(src => src.Department != null ? src.Department.Name : null));

            CreateMap<CreateObservationDto, Observation>()
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => ObservationStatus.Open))
                .ForMember(dest => dest.TicketNumber, opt => opt.Ignore()) // Generated by service
                .ForMember(dest => dest.PriorityId, opt => opt.MapFrom(src => src.PriorityId));

            CreateMap<UpdateObservationDto, Observation>()
                .ForMember(dest => dest.PriorityId, opt => opt.MapFrom(src => src.PriorityId))
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // Audit mappings
            CreateMap<Audit, AuditDto>()
                .ForMember(dest => dest.AuditorName, opt => opt.MapFrom(src => src.Auditor != null ? $"{src.Auditor.FirstName} {src.Auditor.LastName}" : ""))
                .ForMember(dest => dest.AuditorEmail, opt => opt.MapFrom(src => src.Auditor != null ? src.Auditor.Email : ""))
                .ForMember(dest => dest.PlantName, opt => opt.MapFrom(src => src.Plant != null ? src.Plant.Name : null))
                .ForMember(dest => dest.DepartmentName, opt => opt.MapFrom(src => src.Department != null ? src.Department.Name : null));

            CreateMap<CreateAuditDto, Audit>();

            CreateMap<UpdateAuditDto, Audit>()
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));

            // Permit mappings
            CreateMap<Permit, PermitDto>()
                .ForMember(dest => dest.RequestedByUserName, opt => opt.MapFrom(src => src.RequestedBy != null ? $"{src.RequestedBy.FirstName} {src.RequestedBy.LastName}" : ""))
                .ForMember(dest => dest.RequestedByUserEmail, opt => opt.MapFrom(src => src.RequestedBy != null ? src.RequestedBy.Email : ""))
                .ForMember(dest => dest.ApprovedByUserName, opt => opt.MapFrom(src => src.ApprovedBy != null ? $"{src.ApprovedBy.FirstName} {src.ApprovedBy.LastName}" : null))
                .ForMember(dest => dest.ApprovedByUserEmail, opt => opt.MapFrom(src => src.ApprovedBy != null ? src.ApprovedBy.Email : null))
                .ForMember(dest => dest.PlantName, opt => opt.MapFrom(src => src.Plant != null ? src.Plant.Name : null))
                .ForMember(dest => dest.DepartmentName, opt => opt.MapFrom(src => src.Department != null ? src.Department.Name : null));

            CreateMap<CreatePermitDto, Permit>()
                .ForMember(dest => dest.Status, opt => opt.MapFrom(src => PermitStatus.Draft));

            CreateMap<UpdatePermitDto, Permit>()
                .ForAllMembers(opt => opt.Condition((src, dest, srcMember) => srcMember != null));
        }
    }
}
