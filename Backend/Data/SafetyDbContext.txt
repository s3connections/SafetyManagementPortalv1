using Microsoft.EntityFrameworkCore;
using SafetyManagementPortal.Backend.Models;
using SafetyManagementPortal.Backend.DTOs.Audit;
using SafetyManagementPortal.Backend.DTOs.Common;
using SafetyManagementPortal.Backend.DTOs.User;
using SafetyManagementPortal.Backend.Data;

namespace SafetyManagementPortal.Backend.Data
{
    public class SafetyManagementContext : DbContext
    {
        public SafetyManagementContext(DbContextOptions<SafetyManagementContext> options) : base(options)
        {
        }

        public DbSet<User> Users { get; set; }
        public DbSet<Plant> Plants { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Observation> Observations { get; set; }
        public DbSet<Audit> Audits { get; set; }
        public DbSet<AuditQuestion> AuditQuestions { get; set; }
        public DbSet<Permit> Permits { get; set; }
        public DbSet<PermitTemplate> PermitTemplates { get; set; }
        public DbSet<PermitQuestion> PermitQuestions { get; set; }
        public DbSet<PermitAnswer> PermitAnswers { get; set; }
        public DbSet<AuditType> AuditTypes { get; set; }
        public DbSet<IncidentObservation> IncidentObservations { get; set; }
        public DbSet<PermitType> PermitTypes { get; set; }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            // Configure entity relationships to avoid cascade delete issues
            modelBuilder.Entity<Observation>()
                .HasOne(o => o.ReportedByUser)
                .WithMany(u => u.ReportedObservations)
                .HasForeignKey(o => o.ReportedByUserId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Observation>()
                .HasOne(o => o.AssignedToUser)
                .WithMany(u => u.AssignedObservations)
                .HasForeignKey(o => o.AssignedToUserId)
                .OnDelete(DeleteBehavior.SetNull);

            modelBuilder.Entity<Audit>()
                .HasOne(a => a.Auditor)
                .WithMany(u => u.Audits)
                .HasForeignKey(a => a.AuditorId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Permit>()
                .HasOne(p => p.RequestedByUser)
                .WithMany(u => u.RequestedPermits)
                .HasForeignKey(p => p.RequestedByUserId)
                .OnDelete(DeleteBehavior.Restrict);

            modelBuilder.Entity<Permit>()
                .HasOne(p => p.ApprovedByUser)
                .WithMany(u => u.ApprovedPermits)
                .HasForeignKey(p => p.ApprovedByUserId)
                .OnDelete(DeleteBehavior.SetNull);

            modelBuilder.Entity<PermitType>()
                .HasIndex(pt => pt.Code)
                .IsUnique()
                .HasFilter("[Code] IS NOT NULL");

            modelBuilder.Entity<PermitType>()
                .Property(pt => pt.Name)
                .IsRequired();

            // Configure indexes for better performance
            modelBuilder.Entity<User>()
                .HasIndex(u => u.Email)
                .IsUnique();

            modelBuilder.Entity<Observation>()
                .HasIndex(o => o.TicketNumber)
                .IsUnique();

            modelBuilder.Entity<Permit>()
                .HasIndex(p => p.PermitNumber)
                .IsUnique();

            // Configure decimal precision
            modelBuilder.Entity<Audit>()
                .Property(a => a.Score)
                .HasPrecision(5, 2);

            modelBuilder.Entity<PermitAnswer>()
                .Property(pa => pa.NumberValue)
                .HasPrecision(18, 4);
        }
    }
}
